datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  threads   Thread[]
  orders    Orders[]
}

model Thread {
  id        String   @id
  userId    String?  @db.Uuid
  createdAt DateTime @default(now())
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats     ChatMessage[]
}

enum RoleTypes {
  user
  assistant
}

model ChatMessage {
  id        String   @id @default(uuid()) @db.Uuid
  threadId  String
  role      RoleTypes
  message   String
  createdAt DateTime @default(now())
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
}


model Meals  {
  id String   @id @default(uuid()) @db.Uuid
  name String
  description String
  ingredients String
  priceInCents Int
  isLactoseFree Boolean
  isGlutenFree Boolean
  isVegetarian Boolean
  isVegan Boolean
  isSpicy Boolean
  createdAt DateTime @default(now())
}

model Drinks  {
  id String   @id @default(uuid()) @db.Uuid
  name String
  description String
  priceInCents Int
  mililitros Int
  ingredients String
  createdAt DateTime @default(now())
}

model Sides  {
  id String   @id @default(uuid()) @db.Uuid
  name String
  description String
  ingredients String
  priceInCents Int
  isLactoseFree Boolean
  isGlutenFree Boolean
  isVegetarian Boolean
  isVegan Boolean
  isSpicy Boolean
  createdAt DateTime @default(now())
}


model Desserts  {
  id String   @id @default(uuid()) @db.Uuid
  name String
  description String
  ingredients String
  priceInCents Int
  isLactoseFree Boolean
  isGlutenFree Boolean
  isVegetarian Boolean
  isVegan Boolean
  createdAt DateTime @default(now())
}

enum StatusType {
  IN_PROGRESS
  DONE
  CANCELLED
  REFOUND
}

model Orders {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @db.Uuid
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       OrderItem[]
  status      StatusType
  totalCents  Int         @default(0) // Total em centavos
  createdAt   DateTime    @default(now())
}

enum ItemCategory {
  MEALS
  DRINKS
  SIDES
  DESSERTS
}
model OrderItem {
  id           String       @id @default(uuid()) @db.Uuid
  orderId      String       @db.Uuid
  order        Orders       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  itemId       String       @db.Uuid
  ItemCategory ItemCategory
}